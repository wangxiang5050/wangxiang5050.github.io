---
layout: post
title:  "java-泛型学习(1)"
date:   2018-05-29 23:46:55 +0800
categories: reading
---
&emsp;&emsp;今天儿晚上上线，趁着没事儿，翻了翻effective java，再了解一下泛型机制。之前虽然看过，但是了解的还是很模糊，这次感觉又有点新的理解，记录一下。  
&emsp;&emsp;关于书中第23条：请不要在新代码中使用原生态类型中的这段话，读了很多遍也不是很懂。  
>&emsp;&emsp;在无限制通配类型Set<?>和原生态类型Set之间有什么区别呢？这个问号真正起到作用了嘛？这一点不需要赘述，但通配符类型是安全的，原生态类型则是不安全。由于可以将任何元素放进使用原生态类型的集合中，因此很容易破坏该集合的类型约束条件(如第100页的例子中所示的unsafeAdd方法)；  

	    // 这个main方法并不会编译错误
	    public static void main(String[] args) {
	        List<String> strings = new ArrayList<>();
	        unsafeAdd(strings, 1);
	        System.out.println(strings.get(0));
	    }
	    // 100页的unsafeAdd方法
	    private static void unsafeAdd(List list, Object s) {
	        list.add(s);
	    }

&emsp;&emsp;这半句的意思头一遍读的时候还勉强能懂，就是使用原生态类型不安全，无法将类型问题暴露在编译期。unsafeAdd方法甚至在添加的时候都不会报错，只在获取的时候会抛出ClassCastException。

>&emsp;&emsp;但不能将任何元素（除了null之外)放到Collection<?>中。如果尝试这么做的话，将会产生一条像这样的编译时错误消息： 

	    WildCard.java:13: cannot find synbol  
	    symbol	: method add(String)
	    location: interface Collection<capture#825 of ?>
	    c.add("verboten");
 	      ^

&emsp;&emsp;这个转折我真的是饶了很久才绕过来，怎么突然蹦出来一个Collecion<?>，代码在哪里，还不能将非null元素放进去？？？  
&emsp;&emsp;在敲了代码之后，终于明白了。如果想向下面这个List添加元素的话，只能加null进去，加其它的都会编译错误。原因也很简单，你都不晓得类型是啥并写了个?，那编译器更不晓得你要放个啥进去了，所以就编译失败了。  

	    List<?> list = new ArrayList<>();
	    list.add("1");  

&emsp;&emsp;既然不能往里添加元素，那我要你有何用？其实是有用的，因为可以从中取元素啊。下面贴一个书中100页下侧的例子。  

	    static int numElementsInCommon(Set<?> s1, Set<?> s2) {
	        int result = 0;
	        for(Object o1: s1) {
	            if(s2.contains(o1)) result++;
	        }
	        return result;
	    }
	    
&emsp;&emsp;那么如果想向泛型集合中添加元素，该怎么做呢？可以使用泛型方法(generic method)或有限制的通配符类型(bounded wildcard type)。这两个在后面两条，下次分解啦。

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
